# in:			// n개의 입력을 받고 
# 3			// key값인 m개의 입력을 받아
# 222			// key값이 있으면 1, 없으면 0 출력
# 223
# 224
# 2
# 222
# 225
# out:
# 1
# 0

.data
	arr: .space 4000 	# 1000*4
	key: .space 4000	
	suc: .asciiz "1"
	fail: .asciiz "0"
	newline: .asciiz "\n"
.text
	li $v0, 5
	syscall
	move $s0, $v0	#scanf(n)	# n = s0
	
	li $t0, 0	# i = 0 = t0
	li $s6, 1
ary_in:
	beq $t0, $s0, ary_in_end
	li $v0, 5
	syscall
	sll $t7, $t0, 2		# 배열 포인터 옮기기 array pointer
	sw $v0, arr($t7)	# scanf(arr[i])
	addi $t0, $t0, 1
	j ary_in
ary_in_end:
	li $a0, 0
	subi $t0, $s0, 1	# i=n-1
	move $a1, $t0		# a1 = i = n-1
	
	#jal bsearch
	
	li $t0, 0
key_scan:
	li $v0, 5
	syscall
	move $s1, $v0	# scanf(m)	#m = s1
key_in:
	beq $t0, $s1, key_in_end	# t0 = i
	li $v0, 5
	syscall
	sll $t7, $t0, 2
	sw $v0, key($t7)	# key[i]에 값넣기
	addi $t0, $t0, 1	# i++
	j key_in
key_in_end:
	li $a0, 0
	subi $sp, $sp, 4
	sw $ra, 0($sp)		#어차피 이 함수 안에서 출력하고 끝나니까 저장할값은 없음
	
	jal bsearch	# binary_search함수 진입
	lw $ra, 0($sp)
	addi $sp, $sp, 4
exit:
	li $v0, 10
	syscall		# main return 0;
bsearch:
	
	li $s6, 0	# i
	li $t0, 0
for:
	beq $s6, $s1, return
	# low-t1, high-t2, mid-t3 // cnt-t4, cnt1-t5
	li $t1, 0
	addi $t2, $s0, -1
	li $t3, 0
	li $t4, 0		
	li $t5, 0		# low, high, mid, count, count1 = 0
	#subi $t2, $s0, 1	# high = n-1
while:
	bgt $t1, $t2, while_end	# if low > high, then while_end
	addi $t4, $t4, 1	# cnt++
	add $t6, $t1, $t2
	li $s7, 2
	div $t6, $s7		# mid = (low + high)/2
if:	# key[i] < a[mid]
	mflo $t3		# div 처리된거 t3에 넣어줌
	sll $t7, $t3, 2
	lw $s3, arr($t7)
	mul $t0, $s6, 1
	sll $t0, $t0, 2
	lw $s4, key($t0)	#####왜 lbu를 사용했는지가 관건
	bgt $s4, $s3, elseif1
	beq $s3, $s4, elseif2

	subi $t2, $t3, 1
	add $t7, $t7, 1
	j while
elseif1:	# key[i] > a[mid]
	addi $t1, $t3,1
	j while
elseif2:	# key[i] == a[mid]
	la $a0, suc	# printf("1")
	li $v0, 4
	syscall
	la $a0, newline	#\n
	li $v0, 4
	syscall
	addi $t5, $t5, 1
	j while_end
while_end:
	addi $s6, $s6, 1
	addi $t0, $t0, 1	# for문으로 가려고 i++
	bnez $t5, for
	la $a0, fail	#printf("0")
	li $v0, 4
	syscall
	la $a0, newline
	li $v0, 4
	syscall
	
	j for
return:
	#lw $ra, 0($sp)
	#addi $sp, $sp, 4
	jr $ra
