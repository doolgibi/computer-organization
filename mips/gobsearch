.data
	arr: .space 4000 	# 1000*4
	key: .space 4000	
	suc: .asciiz "1"
	fail: .asciiz "0"
	newline: .asciiz "\n"
.text
	li $v0, 5
	syscall
	move $s0, $v0	#scanf(n)	# n = s0
	
	li $t0, 0	# i = 0 = t0
ary_in:
	beq $t0, $s0, ary_in_end
	li $v0, 5
	syscall
	sll $t7, $t0, 2		# 배열 포인터 옮기기 array pointer
	sw $v0, arr($t7)	# scanf(arr[i])
	addi $t0, $t0, 1
	j ary_in
ary_in_end:
	li $a0, 0
	subi $t0, $s0, 1	# i=n-1
	move $a1, $t0		# a1 = i = n-1
	
	#jal bsearch
	
	li $t0, 0
key_scan:
	li $v0, 5
	syscall
	move $s1, $v0	# scanf(m)	#m = s1
key_in:
	beq $t0, $s1, key_in_end	# t0 = i
	li $v0, 5
	syscall
	sll $t7, $t0, 2
	sw $v0, key($t7)	# key[i]에 값넣기
	addi $t0, $t0, 1	# i++
	j key_in
key_in_end:
	li $a0, 0
	li $t0, 0
	subi $sp, $sp, 4
	sw $ra, 0($sp)		#어차피 이 함수 안에서 출력하고 끝나니까 저장할값은 없음
	
	jal bsearch	# binary_search함수 진입
exit:
	li $v0, 10
	syscall		# main return 0;
bsearch:
fori:
	beq $t0, $s1, fori_end
	li $t1, 0
	lb $t4, key($t0)
forj:
	beq $t1, $s1, forj_end
	li $t2, 0	# t2 = cnt
	lb $t3, arr($t1)

	beq $t3, $t4, print1
	addi $t1, $t1, 1
	j forj
forj_end:
	addi $t2, $t2, 1
	beqz $t2, print0
	beq $t2, 1, print1
print0:
	la $a0, fail	#printf("0")
	li $v0, 4
	syscall
	la $a0, newline
	li $v0, 4
	syscall
	
	addi $t0, $t0,1
	j fori
print1: 
	la $a0, suc	#printf("1")
	li $v0, 4
	syscall
	la $a0, newline
	li $v0, 4
	syscall
	
	addi $t0, $t0,1
	j fori
fori_end:
jr $ra