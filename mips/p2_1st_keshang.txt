1. 이진탐색-binary search: 배열 입력받고, 찾는 key 입력받아서 각 key에 대해 있는지 없는지 출력

#include <stdio.h>
#include <stdlib.h>

int binary_search(int key, int a[], int n) //自定义函数binary_search()
{
	int low, high, mid, count = 0, count1 = 0;
	low = 0;
	high = n - 1;
	while (low <= high)    //査找范围不为0时执行循环体语句
	{
		count++;    //count记录査找次数
		mid = (low + high) / 2;    //求中间位置
		if (key<a[mid])    //key小于中间值时
			high = mid - 1;    //确定左子表范围
		else if (key>a[mid])    //key 大于中间值时
			low = mid + 1;    //确定右子表范围
		else if (key == a[mid])    //当key等于中间值时，证明查找成功
		{
			printf("1");
			count1++;    //count1记录查找成功次数
			break;
		}
	}
	if (count1 == 0)    //判断是否查找失敗
		printf("0");
	return 0;
}
입력
	3
	222
	223
	224
	2
	222
	225

출력
	1
	0
 


-------------------------------------------------------------------
2. 하노이의 탑
#include <stdio.h>
void move(int id, char from, char to) {
	printf("move disk %d from %c to %c\n", id, from, to);
}
void hanoi(int base, char from, char via, char to) {
	if (base == 0) {
		move(base, from, via);
		move(base, via, to);
		return;
	}
	hanoi(base - 1, from, via, to);
	move(base, from, via);
	hanoi(base - 1, to, via, from);
	move(base, via, to);
	hanoi(base - 1, from, via, to);
}
int main() {
	int n;
	scanf_s("%d", &n);
	hanoi(n, 'A', 'B', 'C');
	system("pause");
	return 0;
}

입력:
2
출력:
	move disk 0 from A to B  
	move disk 0 from B to C
	move disk 1 from A to B
	move disk 0 from C to B
	move disk 0 from B to A
	move disk 1 from B to C
	move disk 0 from A to B
	move disk 0 from B to C
	move disk 2 from A to B
	move disk 0 from C to B
	move disk 0 from B to A
	move disk 1 from C to B
	move disk 0 from A to B
	move disk 0 from B to C
	move disk 1 from B to A
	move disk 0 from C to B
	move disk 0 from B to A
	move disk 2 from B to C
	move disk 0 from A to B
	move disk 0 from B to C
	move disk 1 from A to B
	move disk 0 from C to B
	move disk 0 from B to A
	move disk 1 from B to C
	move disk 0 from A to B
	move disk 0 from B to C
