.data
	flag: .word 1
	array: .space 80
	false: .word 0
	true: .word 1
	###########################
	buf: .space 4	#!!메모리에서 3을 하는 문자열 배열
	###########################
	
.text
	# t0=num 
	li $v0, 5	#scanf 준비 
	syscall
	move $s0, $v0	#s0에 v0값 이동 
	
	li $t0, 0	#t0=i

	# scan_char for문
scan_char:
	slt $s1, $t0, $s0	# if i >= num, then go to judge
	beq $s1, 0, judge
	###########################
	la $a0, buf	#!!load address, global label buf in to a0
	li $a1, 3	#!!maximum numbers to char to read
	###########################
	
	li $v0, 8
	syscall
	lb $v0, buf($0)	#!! $0생략 가능 
	
	move $t1, $v0	#t1= char
	
	#lw $a0, array
	#add $t2, $a0, $t0
	sb $t1, array($t0)	#array[i] = t1
	
	addi $t0, $t0, 1	# i++
	
	j scan_char

judge: 
	li $t0, 0		#t0=i=0
	div $t2, $s0, 2		#t2=s0/2
	
	j judge_for
	
judge_for:
	subi $t4, $s0, 1
	sub $t4, $t4, $t0
	
	slt $s2, $t0, $t2
	beq $s2, 0, judge_true		#if i >= num/2, then go to judge_end
	
	lb $t5, array($t0)	# t5 = array[i]
	lb $t6, array($t4)

	addi $t0, $t0, 1
	
	beq $t5, $t6, judge_for	#if str[i] == str[num - 1 - i], then go to judge
	j judge_false		# flag = 0이고, judge_false로 가서 0출력하고 시스템종료
	

judge_true:
	li $v0, 1
	lw $a0, true
	syscall
	
	j end
	
judge_false:
	li $v0, 1
	lw $a0, false
	syscall
	
	j end


end:
	li $v0, 10
	syscall
